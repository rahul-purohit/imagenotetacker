package com.cognus.imagegallery.data.provider;

import com.cognus.imagegallery.data.provider.util.ColumnMetadata;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by
 * Foxykeep
 * <p>
 * (More information available
 * https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public abstract class RA_Content {

	public static final Uri CONTENT_URI = Uri.parse("content://"
			+ RA_Provider.AUTHORITY);

	private RA_Content() {
	}

	/**
	 * Created in version 1
	 */
	public static final class gallery extends RA_Content {

		private static final String LOG_TAG = gallery.class.getSimpleName();

		public static final String TABLE_NAME = "gallery";
		public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/ra_-gallery";
		public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/ra_-gallery";

		public static final Uri CONTENT_URI = Uri.parse(RA_Content.CONTENT_URI
				+ "/" + TABLE_NAME);

		public static enum Columns implements ColumnMetadata {
			GALLERY_ID(BaseColumns._ID, "integer"), NAME("name", "text"), CREATED_ON(
					"created_on", "text"), CREATED_BY("created_by", "integer");

			private final String mName;
			private final String mType;

			private Columns(String name, String type) {
				mName = name;
				mType = type;
			}

			@Override
			public int getIndex() {
				return ordinal();
			}

			@Override
			public String getName() {
				return mName;
			}

			@Override
			public String getType() {
				return mType;
			}
		}

		public static final String[] PROJECTION = new String[] {
				Columns.GALLERY_ID.getName(), Columns.NAME.getName(),
				Columns.CREATED_ON.getName(), Columns.CREATED_BY.getName() };

		private gallery() {
			// No private constructor
		}

		public static void createTable(SQLiteDatabase db) {
			if (RA_Provider.ACTIVATE_ALL_LOGS) {
				Log.d(LOG_TAG, "gallery | createTable start");
			}
			db.execSQL("CREATE TABLE " + TABLE_NAME + " ("
					+ Columns.GALLERY_ID.getName() + " "
					+ Columns.GALLERY_ID.getType()
					+ " PRIMARY KEY AUTOINCREMENT" + ", "
					+ Columns.NAME.getName() + " " + Columns.NAME.getType()
					+ ", " + Columns.CREATED_ON.getName() + " "
					+ Columns.CREATED_ON.getType() + ", "
					+ Columns.CREATED_BY.getName() + " "
					+ Columns.CREATED_BY.getType()
					+ ", UNIQUE ('name' COLLATE NOCASE ASC) ON CONFLICT FAIL);");
			db.execSQL("CREATE INDEX 'main'.'NAME_ID_DATA' ON 'gallery' ('name' ASC, 'created_by' ASC);");
			if (RA_Provider.ACTIVATE_ALL_LOGS) {
				Log.d(LOG_TAG, "gallery | createTable end");
			}
		}

		// Version 1 : Creation of the table
		public static void upgradeTable(SQLiteDatabase db, int oldVersion,
				int newVersion) {
			if (RA_Provider.ACTIVATE_ALL_LOGS) {
				Log.d(LOG_TAG, "gallery | upgradeTable start");
			}

			if (oldVersion < 1) {
				Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to "
						+ newVersion + ", data will be lost!");

				db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
				createTable(db);
				return;
			}

			if (oldVersion != newVersion) {
				throw new IllegalStateException(
						"Error upgrading the database to version " + newVersion);
			}

			if (RA_Provider.ACTIVATE_ALL_LOGS) {
				Log.d(LOG_TAG, "gallery | upgradeTable end");
			}
		}

		static String getBulkInsertString() {
			return new StringBuilder("INSERT INTO ").append(TABLE_NAME)
					.append(" ( ").append(Columns.NAME.getName()).append(", ")
					.append(Columns.CREATED_ON.getName()).append(", ")
					.append(Columns.CREATED_BY.getName())
					.append(" ) VALUES (?, ?, ?)").toString();
		}

		static void bindValuesInBulkInsert(SQLiteStatement stmt,
				ContentValues values) {
			int i = 1;
			String value;
			value = values.getAsString(Columns.NAME.getName());
			stmt.bindString(i++, value != null ? value : "");
			value = values.getAsString(Columns.CREATED_ON.getName());
			stmt.bindString(i++, value != null ? value : "");
			stmt.bindLong(i++, values.getAsLong(Columns.CREATED_BY.getName()));
		}
	}

	/**
	 * Created in version 1
	 */
	public static final class image extends RA_Content {

		private static final String LOG_TAG = image.class.getSimpleName();

		public static final String TABLE_NAME = "image";
		public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/ra_-image";
		public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/ra_-image";

		public static final Uri CONTENT_URI = Uri.parse(RA_Content.CONTENT_URI
				+ "/" + TABLE_NAME);

		public static enum Columns implements ColumnMetadata {
			IMAGE_ID(BaseColumns._ID, "integer"), GALLERY_ID("gallery_id",
					"integer"), IMAGE("image", "text"), IMAGE_PATH_LOCAL(
					"image_path_local", "text"), IMAGE_PATH_REMOTE(
					"image_path_remote", "text"), CRETED_ON("creted_on", "text"), CREATED_BY(
					"created_by", "integer"), INFO("info", "integer"), FILE_CREATED_ON(
					"file_created_on", "integer"), FILE_LAST_MODIFIED(
					"file_last_modified", "integer"), SIZE("size", "integer"), EXTRA_INFO(
					"extra_info", "integer");

			private final String mName;
			private final String mType;

			private Columns(String name, String type) {
				mName = name;
				mType = type;
			}

			@Override
			public int getIndex() {
				return ordinal();
			}

			@Override
			public String getName() {
				return mName;
			}

			@Override
			public String getType() {
				return mType;
			}
		}

		public static final String[] PROJECTION = new String[] {
				Columns.IMAGE_ID.getName(), Columns.GALLERY_ID.getName(),
				Columns.IMAGE.getName(), Columns.IMAGE_PATH_LOCAL.getName(),
				Columns.IMAGE_PATH_REMOTE.getName(),
				Columns.CRETED_ON.getName(), Columns.CREATED_BY.getName(),
				Columns.INFO.getName(), Columns.FILE_CREATED_ON.getName(),
				Columns.FILE_LAST_MODIFIED.getName(), Columns.SIZE.getName(),
				Columns.EXTRA_INFO.getName() };

		private image() {
			// No private constructor
		}

		public static void createTable(SQLiteDatabase db) {
			if (RA_Provider.ACTIVATE_ALL_LOGS) {
				Log.d(LOG_TAG, "image | createTable start");
			}
			db.execSQL("CREATE TABLE " + TABLE_NAME + " ("
					+ Columns.IMAGE_ID.getName() + " "
					+ Columns.IMAGE_ID.getType() + " PRIMARY KEY AUTOINCREMENT"
					+ ", " + Columns.GALLERY_ID.getName() + " "
					+ Columns.GALLERY_ID.getType() + ", "
					+ Columns.IMAGE.getName() + " BLOB" 
					+ ", " + Columns.IMAGE_PATH_LOCAL.getName() + " "
					+ Columns.IMAGE_PATH_LOCAL.getType() + ", "
					+ Columns.IMAGE_PATH_REMOTE.getName() + " "
					+ Columns.IMAGE_PATH_REMOTE.getType() + ", "
					+ Columns.CRETED_ON.getName() + " " 
					+ Columns.CRETED_ON.getType() + ", "
					+ Columns.CREATED_BY.getName() + " "
					+ Columns.CREATED_BY.getType() + ", "
					+ Columns.INFO.getName() + " " + Columns.INFO.getType()
					+ ", " + Columns.FILE_CREATED_ON.getName() + " "
					+ Columns.FILE_CREATED_ON.getType() + ", "
					+ Columns.FILE_LAST_MODIFIED.getName() + " "
					+ Columns.FILE_LAST_MODIFIED.getType() + ", "
					+ Columns.SIZE.getName() + " " + Columns.SIZE.getType()
					+ ", " + Columns.EXTRA_INFO.getName() + " "
					+ Columns.EXTRA_INFO.getType() + ",UNIQUE (\"image_path_local\" COLLATE NOCASE ASC,\"gallery_id\" COLLATE NOCASE ASC) ON CONFLICT FAIL);");

			if (RA_Provider.ACTIVATE_ALL_LOGS) {
				Log.d(LOG_TAG, "image | createTable end");
			}
		}

		// Version 1 : Creation of the table
		public static void upgradeTable(SQLiteDatabase db, int oldVersion,
				int newVersion) {
			if (RA_Provider.ACTIVATE_ALL_LOGS) {
				Log.d(LOG_TAG, "image | upgradeTable start");
			}

			if (oldVersion < 1) {
				Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to "
						+ newVersion + ", data will be lost!");

				db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
				createTable(db);
				return;
			}

			if (oldVersion != newVersion) {
				throw new IllegalStateException(
						"Error upgrading the database to version " + newVersion);
			}

			if (RA_Provider.ACTIVATE_ALL_LOGS) {
				Log.d(LOG_TAG, "image | upgradeTable end");
			}
		}

		static String getBulkInsertString() {
			return new StringBuilder("INSERT INTO ").append(TABLE_NAME)
					.append(" ( ").append(Columns.GALLERY_ID.getName())
					.append(", ").append(Columns.IMAGE.getName()).append(", ")
					.append(Columns.IMAGE_PATH_LOCAL.getName()).append(", ")
					.append(Columns.IMAGE_PATH_REMOTE.getName()).append(", ")
					.append(Columns.CRETED_ON.getName()).append(", ")
					.append(Columns.CREATED_BY.getName()).append(", ")
					.append(Columns.INFO.getName()).append(", ")
					.append(Columns.FILE_CREATED_ON.getName()).append(", ")
					.append(Columns.FILE_LAST_MODIFIED.getName()).append(", ")
					.append(Columns.SIZE.getName()).append(", ")
					.append(Columns.EXTRA_INFO.getName())
					.append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)")
					.toString();
		}

		static void bindValuesInBulkInsert(SQLiteStatement stmt,
				ContentValues values) {
			int i = 1;
			String value;
			stmt.bindLong(i++, values.getAsLong(Columns.GALLERY_ID.getName()));
			value = values.getAsString(Columns.IMAGE.getName());
			stmt.bindString(i++, value != null ? value : "");
			value = values.getAsString(Columns.IMAGE_PATH_LOCAL.getName());
			stmt.bindString(i++, value != null ? value : "");
			value = values.getAsString(Columns.IMAGE_PATH_REMOTE.getName());
			stmt.bindString(i++, value != null ? value : "");
			value = values.getAsString(Columns.CRETED_ON.getName());
			stmt.bindString(i++, value != null ? value : "");
			stmt.bindLong(i++, values.getAsLong(Columns.CREATED_BY.getName()));
			stmt.bindLong(i++, values.getAsLong(Columns.INFO.getName()));
			stmt.bindLong(i++,
					values.getAsLong(Columns.FILE_CREATED_ON.getName()));
			stmt.bindLong(i++,
					values.getAsLong(Columns.FILE_LAST_MODIFIED.getName()));
			stmt.bindLong(i++, values.getAsLong(Columns.SIZE.getName()));
			stmt.bindLong(i++, values.getAsLong(Columns.EXTRA_INFO.getName()));
		}
	}
}
